// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "RandomGenerator.h"
#include "GlobalColorGenerationData.h"
#include "BiomesWeights.h"
#include "CoreMinimal.h"

/**
 * Passed to AbstractBiome::GenerateHeight
 */
struct NOCUBETECH_API BiomeHeightGenerationData
{
	// generated by noise with frequency of 1/65536
	// For example: RandomGenerator::BicubicNoiseInterpolation(worldX / 65536, worldY / 65536, seed);
public:
	float x;
	float y;
	int64 seed;

	BiomeHeightGenerationData(float x, float y, int64 seed) : x(x), y(y), seed(seed) {}

private:

	float height65536 = -1;

	float height32768 = -1;

	float height16384 = -1;

	float height8192 = -1;

	float height4096 = -1;

	float height2048 = -1;

	float height1024 = -1;

	float height512 = -1;

	float height256 = -1;

	float height128 = -1;

	float averageHeight1 = -1;

	float averageHeight2 = -1;

	float averageHeight3 = -1;
public:
	float GetHeight65536() {
		if (height65536 == -1) {
			height65536 = RandomGenerator::BicubicNoiseInterpolation(x / 65536, y / 65536, seed);
		}
		return height65536;
	}
	float GetHeight32768() {
		if (height32768 == -1) {
			height32768 = RandomGenerator::BicubicNoiseInterpolation(x / 32768, y / 32768, seed);
		}
		return height32768;
	}
	float GetHeight16384() {
		if (height16384 == -1) {
			height16384 = RandomGenerator::BicubicNoiseInterpolation(x / 16384, y / 16384, seed - 393812634);
		}
		return height16384;
	}
	float GetHeight8192() {
		if (height8192 == -1) {
			height8192 = RandomGenerator::BicubicNoiseInterpolation(x / 8192, y / 8192, seed - 8441242);
		}
		return height8192;
	}
	float GetHeight4096() {
		if (height4096 == -1) {
			height4096 = RandomGenerator::BicubicNoiseInterpolation(x / 4096, y / 4096, seed - 469752076);
		}
		return height4096;
	}
	float GetHeight2048() {
		if (height2048 == -1) {
			height2048 = RandomGenerator::BicubicNoiseInterpolation(x / 2048, y / 2048, seed + 26359759);
		}
		return height2048;
	}
	float GetHeight1024() {
		if (height1024 == -1) {
			height1024 = RandomGenerator::BicubicNoiseInterpolation(x / 1024, y / 1024, seed - 489541445);
		}
		return height1024;
	}
	float GetHeight512() {
		if (height512 == -1) {
			height512 = RandomGenerator::BicubicNoiseInterpolation(x / 512, y / 512, seed - 271294699);
		}
		return height512;
	}
	float GetHeight256() {
		if (height256 == -1) {
			height256 = RandomGenerator::BicubicNoiseInterpolation(x / 256, y / 256, seed - 90074574);
		}
		return height256;
	}
	float GetHeight128() {
		if (height128 == -1) {
			height128 = RandomGenerator::BicubicNoiseInterpolation(x / 128, y / 128, seed - 155302035);
		}
		return height128;
	}
	float GetAverageHeight1() {
		if (averageHeight1 == -1) {
			averageHeight1 = (GetHeight16384() + GetHeight32768() + GetHeight65536()) / 3.;
		}
		return averageHeight1;
	}
	float GetAverageHeight2() {
		if (averageHeight2 == -1) {
			averageHeight2 = (GetHeight2048() + GetHeight4096() + GetHeight8192()) / 3.;
		}
		return averageHeight2;
	}
	float GetAverageHeight3() {
		if (averageHeight3 == -1) {
			averageHeight3 = (GetHeight256() + GetHeight512() + GetHeight1024()) / 3.;
		}
		return averageHeight3;
	}
};


struct NOCUBETECH_API LandscapeBumpState {

	float averageDeltaAbs;
	float minDeltaHeight;
	float maxDeltaHeight;


	static LandscapeBumpState Lerp(LandscapeBumpState one, LandscapeBumpState two, float weight, float inv) {
		return LandscapeBumpState(
			one.averageDeltaAbs * inv + two.averageDeltaAbs * weight,
			one.minDeltaHeight * inv + two.minDeltaHeight * weight,
			one.maxDeltaHeight * inv + two.maxDeltaHeight * weight
		);
	}


	LandscapeBumpState(float averageDeltaAbs, float minDeltaHeight, float maxDeltaHeight)
		: averageDeltaAbs(averageDeltaAbs), minDeltaHeight(minDeltaHeight), maxDeltaHeight(maxDeltaHeight)
	{
	}
};

/**
 * Passed to AbstractBiome::GenerateColor
 */
struct NOCUBETECH_API BiomeColorGenerationData
{
public:

	float x;

	float y;

	int64 seed;

	float calculatedHeight;

	float derivativeX;

	float derivativeY;

	const GlobalColorGenerationData& globalColorGenerationData;

	float delta; // the ratio (world unit / generating texture size) = distance between pixels

	LandscapeBumpState bump1000Meters;

	BiomeColorGenerationData(float x, float y, int64 seed, float calculatedHeight, float derivativeX, float derivativeY,
		const GlobalColorGenerationData& globalColorGenerationData, float delta, LandscapeBumpState bump1000Meters)
		:
		x(x), y(y), seed(seed), calculatedHeight(calculatedHeight), derivativeX(derivativeX),
		derivativeY(derivativeY), globalColorGenerationData(globalColorGenerationData), delta(delta), bump1000Meters(bump1000Meters)
	{
	}



	static BiomeColorGenerationData* Lerp(const BiomeColorGenerationData& one, const BiomeColorGenerationData& two, float weight) {
		float inv = 1 - weight;
		return new BiomeColorGenerationData(
			one.x * inv + two.x * weight,
			one.y * inv + two.y * weight,
			one.seed,
			one.calculatedHeight * inv + two.calculatedHeight * weight,
			one.derivativeX * inv + two.derivativeX * weight,
			one.derivativeY * inv + two.derivativeY * weight,
			one.globalColorGenerationData,
			one.delta,
			LandscapeBumpState::Lerp(one.bump1000Meters, two.bump1000Meters, weight, inv)
		);
	}
 };
/*
struct NOCUBETECH_API AdditionalObjectGenerationData {
	
	float x;

	float y;

	float groundHeight;

	int64 seed;

	const WorldGenerator& worldGenerator;


	AdditionalObjectGenerationData(float x, float y, float groundHeight, const int64& seed, WorldGenerator& worldGenerator)
		: x(x), y(y), groundHeight(groundHeight), seed(seed), worldGenerator(worldGenerator)
	{
	}
};
*/